@model List<SchoolManager.ViewModels.StudentAssignmentOverviewViewModel>

@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Asignación de Estudiantes";
}

<div class="container-fluid">
    <h2 class="my-4">🎓 Asignación de Estudiantes</h2>

    <div class="card border-secondary shadow-sm">
        <div class="card-header bg-secondary text-white d-flex justify-content-between align-items-center">
            <span><i class="bi bi-people-fill me-2"></i>Asignaciones Actuales</span>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover align-middle text-center" id="asignacionesTable">
                    <thead class="table-dark">
                        <tr>
                            <th>#</th>
                            <th>Nombre</th>
                            <th>Correo</th>
                            <th>Estado</th>
                            <th>Grado/Grupo</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Count; i++)
                        {
                            var est = Model[i];
                            <tr data-student-id="@est.StudentId">
                                <td>@(i + 1)</td>
                                <td class="text-start">@est.FullName</td>
                                <td class="text-start">@est.Email</td>
                                <td>
                                    @if (est.IsActive)
                                    {
                                        <span class="badge bg-success">Activo</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-danger">Inactivo</span>
                                    }
                                </td>
                                <td class="text-start grade-group-cell">
                                    <div class="small">
                                        @if (est.GradeGroupPairs != null && est.GradeGroupPairs.Any())
                                        {
                                            foreach (var pair in est.GradeGroupPairs)
                                            {
                                                <div><strong>@pair</strong></div>
                                            }
                                        }
                                        else
                                        {
                                            <em>Sin asignaciones</em>
                                        }
                                    </div>
                                </td>
                                <td>
                                    <a class="btn btn-sm btn-outline-primary"
                                       data-bs-toggle="modal"
                                       data-bs-target="#gradeGroupModal"
                                       data-student-id="@est.StudentId"
                                       data-student-name="@est.FullName">
                                        <i class="bi bi-pencil-square"></i> Editar
                                    </a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal para mostrar y editar grado y grupo -->
<div class="modal fade" id="gradeGroupModal" tabindex="-1" aria-labelledby="gradeGroupModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content shadow">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="gradeGroupModalLabel">Asignación de <span id="modalStudentName"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="gradeGroupInfo" class="mb-3 text-center fs-5">
                    <em>Cargando asignaciones actuales...</em>
                </div>
                <div class="form-group">
                    <label for="gradeGroupSelect">Seleccionar nuevo Grado/Grupo:</label>
                    <select id="gradeGroupSelect" class="form-select">
                        <option value="">-- Seleccione --</option>
                    </select>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-success" id="btnGuardarCambioGrupo">
                    <i class="bi bi-check-circle me-1"></i> Guardar cambios
                </button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $('#gradeGroupModal').on('show.bs.modal', function (event) {
            const button = $(event.relatedTarget);
            const studentId = button.data('student-id');
            const studentName = button.data('student-name');

            $('#modalStudentName').text(studentName);
            const infoContainer = $('#gradeGroupInfo');
            const dropdown = $('#gradeGroupSelect');

            // Limpiar y mostrar carga
            infoContainer.html(`<em>Cargando asignaciones actuales...</em>`);
            dropdown.empty().append(`<option value="">-- Seleccione --</option>`);

            // 1) Cargar asignación actual
            $.get(`/StudentAssignment/GetGradeGroupByStudent/${studentId}`, function (res) {
                if (res.success && res.data) {
                    const actual = res.data.map(x => `${x.grado} - ${x.grupo}`).join('<br/>');
                    infoContainer.html(`<strong>${actual}</strong>`);
                } else {
                    infoContainer.html(`<em>Sin asignaciones.</em>`);
                }
            });

            // 2) Cargar todas las opciones válidas
            $.get(`/StudentAssignment/GetAvailableGradeGroups`, function (res) {
                if (res.success && res.data) {
                    res.data.forEach(opt => {
                        dropdown.append(
                          `<option value="${opt.gradeId}|${opt.groupId}">${opt.display}</option>`
                        );
                    });
                }
            });

            // 3) Guardar nueva asignación sin recargar
            $('#btnGuardarCambioGrupo').off('click').on('click', function () {
                const selected = dropdown.val();
                if (!selected) {
                    Swal.fire('Atención', 'Debe seleccionar una nueva combinación.', 'warning');
                    return;
                }
                const [gradeId, groupId] = selected.split('|');

                $.post('/StudentAssignment/UpdateGroupAndGrade', { studentId, gradeId, groupId }, function (resp) {
                    if (resp.success) {
                        // Actualizar solo la celda correspondiente
                        const row = $(`tr[data-student-id="${studentId}"]`);
                        const displayText = dropdown.find('option:selected').text();
                        row.find('.grade-group-cell .small').html(`<strong>${displayText}</strong>`);
                        $('#gradeGroupModal').modal('hide');
                        Swal.fire('Éxito', resp.message, 'success');
                    } else {
                        Swal.fire('Error', resp.message, 'error');
                    }
                });
            });
        });
    </script>
}
