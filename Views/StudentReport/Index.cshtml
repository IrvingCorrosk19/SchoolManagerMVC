@model SchoolManager.Dtos.StudentReportDto
@{
    ViewData["Title"] = "Reporte del Estudiante";
    Layout = "_AdminLayout";
    var studentId = ViewBag.StudentId;
}

<style>
    .portal-header {
        background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
        color: white;
        padding: 2rem 2rem 1.5rem 2rem;
        border-radius: 1rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1);
    }
    .portal-header h3 {
        margin: 0;
        font-size: 2rem;
        font-weight: 700;
    }
    .portal-header small {
        opacity: 0.9;
        font-size: 1rem;
    }
    .info-block {
        background: #f8fafc;
        border-left: 4px solid #2563eb;
        border-radius: 0.75rem;
        padding: 1.25rem 2rem;
        margin-bottom: 2rem;
    }
    .info-block p {
        margin-bottom: 0.5rem;
        color: #334155;
    }
    .trimester-highlight {
        border: 2px solid #2563eb !important;
        border-radius: 0.5rem;
        font-weight: 600;
        background: #fff;
        color: #1e293b;
        box-shadow: none;
        transition: border-color 0.2s;
    }
    .trimester-highlight:focus, .trimester-highlight:hover {
        border-color: #1e40af !important;
        background: #f0f6ff;
    }
    .trimester-helper {
        font-size: 0.95rem;
        color: #2563eb;
        margin-top: 0.2rem;
        margin-left: 0.2rem;
        font-weight: 500;
    }
    .card {
        border-radius: 1rem;
        box-shadow: 0 4px 6px -1px rgba(0,0,0,0.08);
        border: none;
        margin-bottom: 1.5rem;
    }
    .card-header {
        background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
        color: white;
        border-radius: 1rem 1rem 0 0 !important;
        font-weight: 600;
        font-size: 1.1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    .card-header.bg-light {
        background: #f1f5f9 !important;
        color: #1e293b !important;
    }
    .table {
        border-radius: 0.5rem;
        overflow: hidden;
        margin-bottom: 0;
    }
    .table thead th {
        background-color: #f8fafc;
        border-bottom: 2px solid #e2e8f0;
        text-align: center;
        vertical-align: middle;
        font-weight: 600;
    }
    .table tbody td {
        text-align: center;
        vertical-align: middle;
    }
</style>

<div class="container-fluid">
    <!-- ENCABEZADO AZUL -->
    <div class="portal-header d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center gap-2">
            <i class="bi bi-person-vcard fs-2 text-white"></i>
            <h3 class="mb-0">Portal para Padres</h3>
        </div>
        <div class="text-end">
            <small>@DateTime.Now.ToString("dddd, dd 'de' MMMM 'de' yyyy")</small>
        </div>
    </div>

    <!-- BLOQUE DE INFORMACIÓN DEL ESTUDIANTE -->
    <div class="info-block mb-4">
        <div class="row g-3 align-items-center">
            <div class="col-md-4">
                <p><strong>Nombre:</strong> @Model.StudentName</p>
            </div>
            <div class="col-md-4">
                <p><strong>Grado:</strong> @Model.Grade</p>
            </div>
            <div class="col-md-4 position-relative">
                <p class="mb-1">
                    <strong>Periodo Académico:</strong>
                    @Html.DropDownList("Trimester",
                        new SelectList(Model.AvailableTrimesters, "Trimester", "Trimester", Model.Trimester),
                        new { @class = "form-control d-inline w-auto ms-2 trimester-highlight", id = "trimester-select" })
                </p>
                <div class="trimester-helper">Selecciona el trimestre para ver las calificaciones y asistencias</div>
            </div>
        </div>
    </div>

    <input type="hidden" id="student-id" value="@Model.StudentId" />

    <div class="row">
        <!-- Calificaciones -->
        <div class="col-md-6">
            <div class="card card-outline card-primary">
                <div class="card-header">
                    <i class="bi bi-journal-check me-2"></i> Calificaciones
                </div>
                <div class="card-body">
                    <table class="table table-hover table-bordered align-middle" id="grades-table">
                        <thead>
                            <tr>
                                <th>Materia</th>
                                <th>Actividad</th>
                                <th>Docente</th>
                                <th>Calificación</th>
                                <th>Archivo</th>
                            </tr>
                        </thead>
                        <tbody id="grades-table-body">
                            @foreach (var group in Model.Grades.GroupBy(g => g.Type.ToLower()))
                            {
                                <tr class="table-group-title">
                                    <td colspan="5" class="text-primary fw-bold">@((group.Key[0].ToString().ToUpper() + group.Key.Substring(1)))</td>
                                </tr>
                                foreach (var grade in group)
                                {
                                    <tr>
                                        <td>@grade.Subject</td>
                                        <td>@grade.ActivityName</td>
                                        <td>@grade.Teacher</td>
                                        <td>@grade.Value.ToString("0.0")</td>
                                        <td>
                                            @if (!string.IsNullOrEmpty(grade.FileUrl))
                                            {
                                                <a href="@grade.FileUrl" target="_blank" class="btn btn-sm btn-outline-primary ms-2" title="Descargar archivo adjunto">
                                                    <i class="bi bi-download"></i>
                                                </a>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="3"><strong>Promedio General</strong></td>
                                <td id="grades-average">@(Model.Grades.Any() ? Model.Grades.Average(g => g.Value).ToString("0.0") : "0.0")</td>
                                <td></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            </div>
        </div>

        <!-- Actividades Pendientes -->
        <div class="col-md-6">
            <div class="card card-outline card-warning">
                <div class="card-header">
                    <i class="bi bi-exclamation-circle me-2"></i> Actividades Pendientes
                </div>
                <div class="card-body">
                    <table class="table table-hover table-bordered align-middle" id="pending-activities-table">
                        <thead>
                            <tr>
                                <th>Materia</th>
                                <th>Actividad</th>
                                <th>Fecha</th>
                                <th>Profesor</th>
                                <th>Archivo</th>
                            </tr>
                        </thead>
                        <tbody id="pending-activities-table-body">
                            @foreach (var group in Model.PendingActivities.GroupBy(a => (a.Type ?? "SinTipo").ToLower()))
                            {
                                <tr class="table-group-title">
                                    <td colspan="5" class="text-warning fw-bold">@((group.Key[0].ToString().ToUpper() + group.Key.Substring(1)))</td>
                                </tr>
                                foreach (var activity in group)
                                {
                                    <tr>
                                        <td>@activity.SubjectName</td>
                                        <td>@activity.Name</td>
                                        <td>@activity.CreatedAt.ToString("dd/MM/yyyy")</td>
                                        <td>@activity.TeacherName</td>
                                        <td class="text-center">
                                            @if (!string.IsNullOrEmpty(activity.FileUrl))
                                            {
                                                <a href="@activity.FileUrl" target="_blank" class="btn btn-sm btn-outline-primary" title="Descargar archivo">
                                                    <i class="bi bi-download"></i>
                                                </a>
                                            }
                                            else
                                            {
                                                <span class="text-muted">-</span>
                                            }
                                        </td>
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <!-- Asistencia por Mes -->
        <div class="col-md-6">
            <div class="card card-outline card-primary mb-4">
                <div class="card-header">
                    <i class="bi bi-calendar3 me-2"></i> Asistencia por Mes
                </div>
                <div class="card-body">
                    <table class="table table-hover table-bordered align-middle" id="attendance-month-table">
                        <thead>
                            <tr>
                                <th>Mes</th>
                                <th>Asistencias</th>
                                <th>Ausencias</th>
                                <th>Tardanzas</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var a in Model.AttendanceByMonth)
                            {
                                <tr>
                                    <td>@a.Month</td>
                                    <td>@a.Present</td>
                                    <td>@a.Absent</td>
                                    <td>@a.Late</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Asistencia por Trimestre -->
        <div class="col-md-6">
            <div class="card card-outline card-primary mb-4">
                <div class="card-header">
                    <i class="bi bi-calendar3 me-2"></i> Asistencia por Trimestre
                </div>
                <div class="card-body">
                    <table class="table table-hover table-bordered align-middle mb-4" id="attendance-trimester-table">
                        <thead>
                            <tr>
                                <th>Trimestre</th>
                                <th>Asistencias</th>
                                <th>Ausencias</th>
                                <th>Tardanzas</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var a in Model.AttendanceByTrimester)
                            {
                                <tr>
                                    <td>@a.Trimester</td>
                                    <td>@a.Present</td>
                                    <td>@a.Absent</td>
                                    <td>@a.Late</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Reportes de Disciplina -->
    <div class="row">
        <div class="col-12">
            <div class="card card-outline card-primary mb-4">
                <div class="card-header">
                    <i class="bi bi-exclamation-triangle me-2"></i> Reportes de Disciplina
                </div>
                <div class="card-body">
                    <table class="table table-hover table-bordered align-middle" id="discipline-table">
                        <thead>
                            <tr>
                                <th>Fecha</th>
                                <th>Hora</th>
                                <th>Tipo</th>
                                <th>Estado</th>
                                <th>Descripción</th>
                                <th>Profesor</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (Model.DisciplineReports != null && Model.DisciplineReports.Any())
                            {
                                foreach (var report in Model.DisciplineReports)
                                {
                                    <tr>
                                        <td>@report.Date.ToString("dd/MM/yyyy")</td>
                                        <td>@report.Time</td>
                                        <td>@report.Type</td>
                                        <td>@report.Status</td>
                                        <td>@report.Description</td>
                                        <td>@report.Teacher</td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="6" class="text-center text-muted">No hay reportes de disciplina registrados.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function groupBy(array, key) {
            if (!array || !Array.isArray(array)) return {};
            return array.reduce((result, currentItem) => {
                if (!currentItem || !currentItem[key]) return result;
                const keyValue = currentItem[key].toString().toLowerCase();
                (result[keyValue] = result[keyValue] || []).push(currentItem);
                return result;
            }, {});
        }
        $(document).ready(function () {
            $('#trimester-select').on('change', function () {
                const selectedTrimester = $(this).val();
                const studentId = $('#student-id').val();

                if (!selectedTrimester || !studentId) {
                    alert("Falta seleccionar un trimestre o estudiante.");
                    return;
                }

                $.ajax({
                    url: '@Url.Action("GetTrimesterData", "StudentReport")',
                    type: 'GET',
                    data: {
                        studentId: studentId,
                        trimester: selectedTrimester
                    },
                    success: function (data) {
                        if (data.error) {
                            alert(data.error);
                            return;
                        }
                        console.log('grades:', data.grades);
                        // Calificaciones agrupadas por tipo
                        const gradesTbody = $('#grades-table-body');
                        gradesTbody.empty();
                        let sum = 0;
                        let count = 0;
                        const grouped = groupBy(data.grades, 'subject');
                        const groupedType = groupBy(data.grades, 'type');
                        Object.keys(groupedType).forEach(type => {
                            gradesTbody.append(`<tr class='table-group-title'><td colspan='5' class='text-primary fw-bold'>${type.charAt(0).toUpperCase() + type.slice(1)}</td></tr>`);
                            groupedType[type].forEach(g => {
                                sum += g.value;
                                count++;
                                gradesTbody.append(`
                                    <tr>
                                        <td>${g.subject}</td>
                                        <td>${g.activityName || '-'}</td>
                                        <td>${g.teacher}</td>
                                        <td>${g.value.toFixed(1)}</td>
                                        <td>${g.fileUrl ? `<a href="${g.fileUrl}" target="_blank" class="btn btn-sm btn-outline-primary ms-2" title="Descargar archivo adjunto"><i class="bi bi-download"></i></a>` : '<span class="text-muted">-</span>'}</td>
                                    </tr>`);
                            });
                        });
                        const average = count > 0 ? (sum / count).toFixed(1) : "0.0";
                        $('#grades-average').text(average);

                        // Asistencia por Trimestre
                        const attTrimesterTbody = $('#attendance-trimester-table tbody');
                        attTrimesterTbody.empty();
                        data.attendanceByTrimester.forEach(a => {
                            attTrimesterTbody.append(`
                                <tr>
                                    <td>${a.trimester}</td>
                                    <td>${a.present}</td>
                                    <td>${a.absent}</td>
                                    <td>${a.late}</td>
                                </tr>`);
                        });

                        // Asistencia por Mes
                        const attMonthTbody = $('#attendance-month-table tbody');
                        attMonthTbody.empty();
                        data.attendanceByMonth.forEach(a => {
                            attMonthTbody.append(`
                                <tr>
                                    <td>${a.month}</td>
                                    <td>${a.present}</td>
                                    <td>${a.absent}</td>
                                    <td>${a.late}</td>
                                </tr>`);
                        });

                        // Actividades Pendientes agrupadas por tipo
                        const pendingTbody = $('#pending-activities-table-body');
                        pendingTbody.empty();
                        if (data.pendingActivities && data.pendingActivities.length > 0) {
                            const groupedPending = groupBy(data.pendingActivities, 'type');
                            Object.keys(groupedPending).forEach(type => {
                                pendingTbody.append(`<tr class='table-group-title'><td colspan='5' class='text-warning fw-bold'>${type.charAt(0).toUpperCase() + type.slice(1)}</td></tr>`);
                                groupedPending[type].forEach(a => {
                                    const fecha = a.createdAt ? new Date(a.createdAt) : null;
                                    const fechaStr = (fecha && !isNaN(fecha)) ? fecha.toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit', year: 'numeric' }) : '-';
                                    pendingTbody.append(`
                                        <tr>
                                            <td>${a.subjectName}</td>
                                            <td>${a.name}</td>
                                            <td>${fechaStr}</td>
                                            <td>${a.teacherName}</td>
                                            <td class="text-center">${a.fileUrl ? `<a href="${a.fileUrl}" target="_blank" class="btn btn-sm btn-outline-primary" title="Descargar archivo"><i class="bi bi-download"></i></a>` : '<span class="text-muted">-</span>'}</td>
                                        </tr>`);
                                });
                            });
                        } else {
                            pendingTbody.append('<tr><td colspan="5" class="text-center text-muted">No hay actividades pendientes para mostrar.</td></tr>');
                        }

                        // Reportes de Disciplina
                        const disciplineTbody = $('#discipline-table tbody');
                        disciplineTbody.empty();
                        if (data.disciplineReports && data.disciplineReports.length > 0) {
                            data.disciplineReports.forEach(r => {
                                let fecha = r.date ? new Date(r.date) : null;
                                let fechaStr = (fecha && !isNaN(fecha)) ?
                                    fecha.toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit', year: 'numeric' }) :
                                    'Sin fecha';
                                let tipo = r.type || 'Sin tipo';
                                disciplineTbody.append(`
                                    <tr>
                                        <td>${fechaStr}</td>
                                        <td>${r.time || ''}</td>
                                        <td>${tipo}</td>
                                        <td>${r.status || ''}</td>
                                        <td>${r.description || ''}</td>
                                        <td>${r.teacher || ''}</td>
                                    </tr>
                                `);
                            });
                        } else {
                            disciplineTbody.append(`
                                <tr>
                                    <td colspan="6" class="text-center text-muted">No hay reportes de disciplina registrados.</td>
                                </tr>
                            `);
                        }
                    },
                    error: function (xhr, status, error) {
                        alert("Error al obtener datos del servidor.");
                    }
                });
            });
        });
    </script>
}


