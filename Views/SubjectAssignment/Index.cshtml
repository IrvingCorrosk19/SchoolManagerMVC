@model IEnumerable<SchoolManager.Models.ViewModels.SubjectAssignmentViewModel>

@{
    Layout = "_AdminLayout";
    ViewData["Title"] = "Catálogo de Materias";
}

<style>
    .portal-header {
        background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
        color: white;
        padding: 2rem 2rem 1.5rem 2rem;
        border-radius: 1rem;
        margin-bottom: 2rem;
        box-shadow: 0 4px 6px -1px rgba(0,0,0,0.1);
    }
    .portal-header h3 {
        margin: 0;
        font-size: 2rem;
        font-weight: 700;
    }
    .portal-header small {
        opacity: 0.9;
        font-size: 1rem;
    }
    .card {
        border-radius: 1rem;
        box-shadow: 0 4px 6px -1px rgba(0,0,0,0.08);
        border: none;
        margin-bottom: 1.5rem;
    }
    .card-header {
        background: linear-gradient(135deg, #2563eb 0%, #1e40af 100%);
        color: white;
        border-radius: 1rem 1rem 0 0 !important;
        font-weight: 600;
        font-size: 1.1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
    }
    .table {
        border-radius: 0.5rem;
        overflow: hidden;
        margin-bottom: 0;
    }
    .table thead th {
        background-color: #f8fafc;
        border-bottom: 2px solid #e2e8f0;
        text-align: center;
        vertical-align: middle;
        font-weight: 600;
    }
    .table tbody td {
        text-align: center;
        vertical-align: middle;
    }
    .btn-primary, .btn-danger, .btn-success {
        border-radius: 0.5rem;
        font-weight: 500;
    }
    .badge {
        font-size: 1em;
        border-radius: 0.5rem;
        padding: 0.5em 1em;
    }
</style>

<div class="container-fluid">
    <!-- ENCABEZADO AZUL -->
    <div class="portal-header d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center gap-2">
            <i class="bi bi-journal-bookmark-fill fs-2 text-white"></i>
            <h3 class="mb-0">Catálogo de Materias</h3>
        </div>
        <div class="text-end">
            <small>@DateTime.Now.ToString("dddd, dd 'de' MMMM 'de' yyyy")</small>
        </div>
    </div>

    <div class="card card-primary card-outline">
        <div class="card-header">
            <i class="bi bi-journal-bookmark-fill me-2"></i> Asignaciones Actuales
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-striped table-hover align-middle text-center" id="asignacionTable">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Especialidad</th>
                            <th>Área</th>
                            <th>Materia</th>
                            <th>Estado</th>
                            <th>Grado</th>
                            <th>Grupo</th>
                            <th>Acciones</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{ int i = 1; foreach (var item in Model) {
                            <tr data-assignment-id="@item.Id">
                                <td>@i</td>
                                <td class="text-start">@item.SpecialtyName</td>
                                <td class="text-start">@item.AreaName</td>
                                <td class="text-start">@item.SubjectName</td>
                                <td>
                                    <span class="badge @(item.Status == "Active" ? "bg-success" : "bg-danger")">
                                        @(item.Status == "Active" ? "Activo" : "Inactivo")
                                    </span>
                                </td>
                                <td>@item.GradeLevelName</td>
                                <td>@item.GroupName</td>
                                <td class="d-flex justify-content-start align-items-center">
                                    <button type="button" class="btn btn-sm btn-primary me-2" data-bs-toggle="modal" data-bs-target="#editModal"
                                            data-assignment-id="@item.Id"
                                            data-specialty-name="@item.SpecialtyName"
                                            data-area-name="@item.AreaName"
                                            data-subject-name="@item.SubjectName"
                                            data-grade-name="@item.GradeLevelName"
                                            data-group-name="@item.GroupName">
                                        <i class="bi bi-pencil-square"></i> Editar
                                    </button>
                                    <a href="@Url.Action("ChangeStatus", new { id = item.Id })" class="btn btn-sm @(item.Status == "Active" ? "btn-danger" : "btn-success")">
                                        <i class="bi @(item.Status == "Active" ? "bi-pause-circle" : "bi-play-circle")"></i>
                                        @(item.Status == "Active" ? "Desactivar" : "Activar")
                                    </a>
                                </td>
                            </tr>
                            i++;
                        } }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal de Edición -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content shadow">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="editModalLabel">Editar Asignación</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editAssignmentForm">
                    <div class="mb-3">
                        <label for="specialtyId" class="form-label">Especialidad</label>
                        <select class="form-control" id="specialtyId" name="SpecialtyId">
                            <option value="">Seleccione una especialidad</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="areaId" class="form-label">Área</label>
                        <select class="form-control" id="areaId" name="AreaId">
                            <option value="">Seleccione un área</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="subjectId" class="form-label">Materia</label>
                        <select class="form-control" id="subjectId" name="SubjectId">
                            <option value="">Seleccione una materia</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="gradeLevelId" class="form-label">Grado</label>
                        <select class="form-control" id="gradeLevelId" name="GradeLevelId">
                            <option value="">Seleccione un grado</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="groupId" class="form-label">Grupo</label>
                        <select class="form-control" id="groupId" name="GroupId">
                            <option value="">Seleccione un grupo</option>
                        </select>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                        <button type="button" class="btn btn-success" id="btnSaveChanges">Guardar Cambios</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.6.0/dist/jquery.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.13.6/js/dataTables.bootstrap5.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>


        /*----------------------------------
                 DataTable
               ----------------------------------*/
               $(function () {
                   $('#asignacionTable').DataTable({
                       language:{ search:"Buscar:", lengthMenu:"Mostrar _MENU_", info:"Mostrando _START_ a _END_ de _TOTAL_", zeroRecords:"Sin coincidencias",
                                  paginate:{first:"Primero", last:"Último", next:"→", previous:"←"} },
                       pageLength:25, responsive:true
                   });
               });
        /*----------------------------------
          Variables globales
        ----------------------------------*/
        let currentAssignmentId = null;
        window.allAssignments = [];      // Datos completos para la asignación

        /*----------------------------------
          Helpers
        ----------------------------------*/
        const distinct = (arr, key) => [...new Map(arr.map(o => [o[key], o])).values()]; // Filtrar valores únicos
        const opts = (list, idKey, nameKey, sel) => // Función para generar las opciones del select
            '<option value="">-- Seleccione --</option>' +
            list.map(o => `<option value="${o[idKey]}" ${o[idKey] === sel ? 'selected' : ''}>${o[nameKey]}</option>`).join("");

        function loadDropdowns(assignmentId) {
            // Filtra los datos globales según el ID de la asignación
            const currentAssignment = window.allAssignments.find(a => a.id === assignmentId);
            const spList = distinct(window.allAssignments, "specialtyId");
            const areaList = currentAssignment ? distinct(window.allAssignments.filter(a => a.specialtyId === currentAssignment.specialtyId), "areaId") : [];
            const subjectList = currentAssignment && currentAssignment.areaId ? distinct(window.allAssignments.filter(a => a.specialtyId === currentAssignment.specialtyId && a.areaId === currentAssignment.areaId), "subjectId") : [];
            const gradeList = currentAssignment && currentAssignment.subjectId ? distinct(window.allAssignments.filter(a => a.specialtyId === currentAssignment.specialtyId && a.areaId === currentAssignment.areaId && a.subjectId === currentAssignment.subjectId), "gradeLevelId") : [];
            const groupList = currentAssignment && currentAssignment.gradeLevelId ? distinct(window.allAssignments.filter(a => a.specialtyId === currentAssignment.specialtyId && a.areaId === currentAssignment.areaId && a.subjectId === currentAssignment.subjectId && a.gradeLevelId === currentAssignment.gradeLevelId), "groupId") : [];

            // Poblamos los dropdowns
            $('#specialtyId').html(opts(spList, 'specialtyId', 'specialtyName', currentAssignment?.specialtyId));
            $('#areaId').html(opts(areaList, 'areaId', 'areaName', currentAssignment?.areaId));
            $('#subjectId').html(opts(subjectList, 'subjectId', 'subjectName', currentAssignment?.subjectId));
            $('#gradeLevelId').html(opts(gradeList, 'gradeLevelId', 'gradeLevelName', currentAssignment?.gradeLevelId));
            $('#groupId').html(opts(groupList, 'groupId', 'groupName', currentAssignment?.groupId));
        }

        /*----------------------------------
          Cargar asignación actual
        ----------------------------------*/
        $('#editModal').on('show.bs.modal', function (e) {
            const btn = $(e.relatedTarget);
            currentAssignmentId = btn.data('assignment-id');

            // Cargar la lista completa de asignaciones (idealmente ya la tendrías disponible en la página)
            $.get('@Url.Action("GetAllAssignments", "SubjectAssignment")', function(response) {
                if (response.success) {
                    window.allAssignments = response.assignments; // Asumimos que 'assignments' es la lista completa
                    loadDropdowns(currentAssignmentId); // Cargar los dropdowns con los valores correctos
                } else {
                    Swal.fire('Error', 'No se pudieron cargar las asignaciones', 'error');
                }
            });
        });

        /*----------------------------------
          Cascada local (sin llamadas extra)
        ----------------------------------*/
        $(document).on('change', '#specialtyId', function() {
            const specialtyId = $(this).val();
            const areaList = distinct(window.allAssignments.filter(a => a.specialtyId === specialtyId), "areaId");
            $('#areaId').html(opts(areaList, 'areaId', 'areaName'));

            // Limpiar otros selects
            $('#subjectId, #gradeLevelId, #groupId').html('<option value="">-- Seleccione --</option>');
        });

        $(document).on('change', '#areaId', function() {
            const specialtyId = $('#specialtyId').val();
            const areaId = $(this).val();
            const subjectList = distinct(window.allAssignments.filter(a => a.specialtyId === specialtyId && a.areaId === areaId), "subjectId");
            $('#subjectId').html(opts(subjectList, 'subjectId', 'subjectName'));

            // Limpiar los demás selects
            $('#gradeLevelId, #groupId').html('<option value="">-- Seleccione --</option>');
        });

        $(document).on('change', '#subjectId', function() {
            const specialtyId = $('#specialtyId').val();
            const areaId = $('#areaId').val();
            const subjectId = $(this).val();
            const gradeList = distinct(window.allAssignments.filter(a => a.specialtyId === specialtyId && a.areaId === areaId && a.subjectId === subjectId), "gradeLevelId");
            $('#gradeLevelId').html(opts(gradeList, 'gradeLevelId', 'gradeLevelName'));

            // Limpiar el grupo
            $('#groupId').html('<option value="">-- Seleccione --</option>');
        });

        $(document).on('change', '#gradeLevelId', function() {
            const specialtyId = $('#specialtyId').val();
            const areaId = $('#areaId').val();
            const subjectId = $('#subjectId').val();
            const gradeLevelId = $(this).val();
            const groupList = distinct(window.allAssignments.filter(a => a.specialtyId === specialtyId && a.areaId === areaId && a.subjectId === subjectId && a.gradeLevelId === gradeLevelId), "groupId");
            $('#groupId').html(opts(groupList, 'groupId', 'groupName'));
        });

                    /*----------------------------------
                      Guardar cambios
                    ----------------------------------*/
        $('#btnSaveChanges').on('click', function() {
                   const formData = {
            Id: currentAssignmentId, // debe ser un Guid correcto, no vacío
            SpecialtyId: $('#specialtyId').val() || null,
            AreaId: $('#areaId').val() || null,
            SubjectId: $('#subjectId').val() || null,
            GradeLevelId: $('#gradeLevelId').val() || null,
            GroupId: $('#groupId').val() || null
           };

             $.ajax({
                url: '@Url.Action("Edit", "SubjectAssignment")',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(formData),
                success: function(response) {
                    if (response.success) {
                        Swal.fire('Éxito', response.message, 'success').then(() => location.reload());
                    } else {
                        Swal.fire({
                            text: response.message,
                            showCancelButton: false,
                            confirmButtonText: 'Aceptar',
                            showConfirmButton: true,
                            icon: 'error',
                            customClass: {
                                title: 'd-none'
                            }
                        });
                    }
                },
                    error: function(xhr) {
                        let errorMessage = 'No se pudieron guardar los cambios';

                        // Si el servidor devuelve algún mensaje en el cuerpo
                        if (xhr.responseJSON && xhr.responseJSON.message) {
                            errorMessage = xhr.responseJSON.message;
                        }

                        Swal.fire({
                            text: errorMessage,
                            showCancelButton: false,
                            confirmButtonText: 'Aceptar',
                            showConfirmButton: true,
                            icon: 'error',
                            customClass: {
                                title: 'd-none'
                            }
                        });
                    }
             });

        });
    </script>
}



